# Test conditions for N17995 CTC C2 using TMC13 octree
# octree lossy-geom  --  lossy-attrs liftt
---
categories:
  lossy-geom-lossy-attrs:
    encflags:
     - mode: 0

     -
       - !conditional '${src-unit-metres}'
       - srcUnit: metre
       - srcUnitLength: '${src-unit-metres}'
       - outputUnitLength: '${src-unit-metres}'

     ##
     # geometry parameters (octree)
     - trisoupNodeSizeLog2: 0
     - mergeDuplicatedPoints: 1
     - neighbourAvailBoundaryLog2: 8
     - intra_pred_max_node_size_log2: 6
     - positionQuantizationScale:
         r01: '$eval{ $rp = 5; $gp = ${src-geometry-precision}; $p_min = max(gp - 9, 7); $start = min(1, $gp - ($p_min + 6)); $step = max(1, (min($gp - 1, $p_min + 7) - $p_min) / 5); $y = $start + round($rp * $step); $div = 1 << (abs($y) + 1); ((1 - 2*signbit($y)) % $div) / $div }'
         r02: '$eval{ $rp = 4; $gp = ${src-geometry-precision}; $p_min = max(gp - 9, 7); $start = min(1, $gp - ($p_min + 6)); $step = max(1, (min($gp - 1, $p_min + 7) - $p_min) / 5); $y = $start + round($rp * $step); $div = 1 << (abs($y) + 1); ((1 - 2*signbit($y)) % $div) / $div }'
         r03: '$eval{ $rp = 3; $gp = ${src-geometry-precision}; $p_min = max(gp - 9, 7); $start = min(1, $gp - ($p_min + 6)); $step = max(1, (min($gp - 1, $p_min + 7) - $p_min) / 5); $y = $start + round($rp * $step); $div = 1 << (abs($y) + 1); ((1 - 2*signbit($y)) % $div) / $div }'
         r04: '$eval{ $rp = 2; $gp = ${src-geometry-precision}; $p_min = max(gp - 9, 7); $start = min(1, $gp - ($p_min + 6)); $step = max(1, (min($gp - 1, $p_min + 7) - $p_min) / 5); $y = $start + round($rp * $step); $div = 1 << (abs($y) + 1); ((1 - 2*signbit($y)) % $div) / $div }'
         r05: '$eval{ $rp = 1; $gp = ${src-geometry-precision}; $p_min = max(gp - 9, 7); $start = min(1, $gp - ($p_min + 6)); $step = max(1, (min($gp - 1, $p_min + 7) - $p_min) / 5); $y = $start + round($rp * $step); $div = 1 << (abs($y) + 1); ((1 - 2*signbit($y)) % $div) / $div }'
         r06: '$eval{ $rp = 0; $gp = ${src-geometry-precision}; $p_min = max(gp - 9, 7); $start = min(1, $gp - ($p_min + 6)); $step = max(1, (min($gp - 1, $p_min + 7) - $p_min) / 5); $y = $start + round($rp * $step); $div = 1 << (abs($y) + 1); ((1 - 2*signbit($y)) % $div) / $div }'
     -
       - !conditional '${numLasers}'
       - angularEnabled: 1
       - numLasers: '${numLasers}'
       - lasersTheta: '${lasersTheta}'
       - lasersZ: '${lasersZ}'
       - lasersNumPhiPerTurn:  '${lasersNumPhiPerTurn}'
       - planarBufferDisabled: 1

     # default qtbt and planar with cat3-frame exception
     - maxNumQtBtBeforeOt: 4
     - minQtbtSizeLog2: 0
     - planarEnabled: 1
     - planarModeIdcmUse: 0
     -
       - !conditional '"${group}" eq "cat3-frame"'
       - partitionMethod: 0
       - maxNumQtBtBeforeOt: 6
       - planarModeIdcmUse: 32

     ####
     # attribute coding (common options -- relies on option ordering)
     #  - scale 16bit reflectance data to 8bit
     #  - use lifting transform for lossy conditions
     -
       - convertPlyColourspace: 1
       - transformType: 2
       - numberOfNearestNeighborsInPrediction: 3
       - levelOfDetailCount: '$eval{ ${seq_lod} || 12 }'
       - lodDecimator: 0
       -
         - !conditional '"${group}" =~ m{^cat3}'
         - lodDecimator: 1
         - lod_neigh_bias: ${seq_lod_bias}
       -
         - !conditional '"${group}" eq "cat3-fused"'
         - lodDecimator: 2
       -
         - !conditional '${numLasers}'
         - lod_neigh_bias: '1,1,1'
         - spherical_coord_flag: 1

       ##
       # attribute coding -- reflectance
       -
         - !conditional '${has_refl}'
         - adaptivePredictionThreshold: 64
         - qp:
             r01: 51
             r02: 46
             r03: 40
             r04: 34
             r05: 28
             r06: 22
         - bitdepth: 8
         -
           - !conditional '${reflectance8b16b_scale_factor}'
           - attrOffset: 0
           - attrScale: ${reflectance8b16b_scale_factor}
         - attribute: reflectance

       ##
       # attribute coding -- colour
       -
         - !conditional '${has_colour}'
         - adaptivePredictionThreshold: 64
         - qp:
             r01: 51
             r02: 46
             r03: 40
             r04: 34
             r05: 28
             r06: 22
         - qpChromaOffset: 0
         - bitdepth: 8
         - attrOffset: 0
         - attrScale: 1
         - attribute: color

    decflags:
     - mode: 1
     -
       - !conditional '${src-unit-metres}'
       - outputUnitLength: '${src-unit-metres}'

     - convertPlyColourspace: 1

    pcerrorflags:
     - dropdups: 2
     - neighborsProc: 1

    sequences:
      # cat3
      citytunnel_q1mm:
      tollbooth_q1mm:
      overpass_q1mm:

      ford_01_q1mm:
        # todo(??): it would be nice if the encoder could make this adjustment
        # override dist2 at particular rate points (lossy geometry only)
        seq_lod: { r01: 8, r02: 9 }

      ford_02_q1mm:
        # override dist2 at particular rate points (lossy geometry only)
        seq_lod: { r01: 8, r02: 9 }

      ford_03_q1mm:
        # override dist2 at particular rate points (lossy geometry only)
        seq_lod: { r01: 8, r02: 9 }

      qnxadas-junction-approach:
        # override dist2 at particular rate points (lossy geometry only)
        seq_lod: { r01: 8, r02: 9 }

      qnxadas-junction-exit:
        # override dist2 at particular rate points (lossy geometry only)
        seq_lod: { r01: 8, r02: 9 }

      qnxadas-motorway-join:
        # override dist2 at particular rate points (lossy geometry only)
        seq_lod: { r01: 8, r02: 9 }

      qnxadas-navigating-bends:
        # override dist2 at particular rate points (lossy geometry only)
        seq_lod: { r01: 8, r02: 9 }

      # cat1
      arco_valentino_dense_vox12:
      arco_valentino_dense_vox20:
      basketball_player_vox11_00000200:
      boxer_viewdep_vox12:
      dancer_vox11_00000001:
      egyptian_mask_vox12:
      egyptian_mask_vox20:
      facade_00009_vox12:
      facade_00009_vox20:
      facade_00015_vox14:
      facade_00015_vox20:
      facade_00064_vox11:
      facade_00064_vox14:
      facade_00064_vox20:
      frog_00067_vox12:
      frog_00067_vox20:
      head_00039_vox12:
      head_00039_vox20:
      house_without_roof_00057_vox12:
      house_without_roof_00057_vox20:
      landscape_00014_vox14:
      landscape_00014_vox20:
      longdress_viewdep_vox12:
      longdress_vox10_1300:
      loot_viewdep_vox12:
      loot_vox10_1200:
      palazzo_carignano_dense_vox14:
      palazzo_carignano_dense_vox20:
      queen_0200:
      redandblack_viewdep_vox12:
      redandblack_vox10_1550:
      shiva_00035_vox12:
      shiva_00035_vox20:
      soldier_viewdep_vox12:
      soldier_vox10_0690:
      stanford_area_2_vox16:
      stanford_area_2_vox20:
      stanford_area_4_vox16:
      stanford_area_4_vox20:
      staue_klimt_vox12:
      staue_klimt_vox20:
      thaidancer_viewdep_vox12:
      ulb_unicorn_hires_vox15:
      ulb_unicorn_hires_vox20:
      ulb_unicorn_vox13:
      ulb_unicorn_vox20:
